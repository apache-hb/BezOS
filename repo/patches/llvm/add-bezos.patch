diff --git a/clang/lib/Basic/Targets.cpp b/clang/lib/Basic/Targets.cpp
index 281aebdb1c35..ea36cbbc7f6a 100644
--- a/clang/lib/Basic/Targets.cpp
+++ b/clang/lib/Basic/Targets.cpp
@@ -633,6 +633,9 @@ std::unique_ptr<TargetInfo> AllocateTarget(const llvm::Triple &Triple,
     case llvm::Triple::UEFI:
       return std::make_unique<UEFIX86_64TargetInfo>(Triple, Opts);
 
+    case llvm::Triple::BezOS:
+        return std::make_unique<BezOSTargetInfo<X86_64TargetInfo>>(Triple, Opts);
+
     case llvm::Triple::Win32: {
       switch (Triple.getEnvironment()) {
       case llvm::Triple::Cygnus:
diff --git a/clang/lib/Basic/Targets/OSTargets.h b/clang/lib/Basic/Targets/OSTargets.h
index 991efd2bde01..a796ea3d47fe 100644
--- a/clang/lib/Basic/Targets/OSTargets.h
+++ b/clang/lib/Basic/Targets/OSTargets.h
@@ -1040,6 +1040,21 @@ public:
   }
 };
 
+template<typename Target>
+class LLVM_LIBRARY_VISIBILITY BezOSTargetInfo : public OSTargetInfo<Target> {
+protected:
+  void getOSDefines(const LangOptions &Opts, const llvm::Triple &Triple,
+    MacroBuilder &Builder) const override {
+    DefineStd(Builder, "bezos", Opts);
+    if (Opts.POSIXThreads)
+      Builder.defineMacro("_REENTRANT");
+    if (Opts.CPlusPlus)
+      Builder.defineMacro("_GNU_SOURCE");
+  }
+public:
+  using OSTargetInfo<Target>::OSTargetInfo;
+};
+
 } // namespace targets
 } // namespace clang
 #endif // LLVM_CLANG_LIB_BASIC_TARGETS_OSTARGETS_H
diff --git a/clang/lib/Driver/CMakeLists.txt b/clang/lib/Driver/CMakeLists.txt
index 5bdb6614389c..58a97dcec61f 100644
--- a/clang/lib/Driver/CMakeLists.txt
+++ b/clang/lib/Driver/CMakeLists.txt
@@ -46,6 +46,7 @@ add_clang_library(clangDriver
   ToolChains/AMDGPUOpenMP.cpp
   ToolChains/AVR.cpp
   ToolChains/BareMetal.cpp
+  ToolChains/BezOS.cpp
   ToolChains/Clang.cpp
   ToolChains/CommonArgs.cpp
   ToolChains/CrossWindows.cpp
diff --git a/clang/lib/Driver/Driver.cpp b/clang/lib/Driver/Driver.cpp
index 50941d2aaa42..685a5a0f5693 100644
--- a/clang/lib/Driver/Driver.cpp
+++ b/clang/lib/Driver/Driver.cpp
@@ -13,6 +13,7 @@
 #include "ToolChains/AVR.h"
 #include "ToolChains/Arch/RISCV.h"
 #include "ToolChains/BareMetal.h"
+#include "ToolChains/BezOS.h"
 #include "ToolChains/CSKYToolChain.h"
 #include "ToolChains/Clang.h"
 #include "ToolChains/CrossWindows.h"
@@ -6709,6 +6710,9 @@ const ToolChain &Driver::getToolChain(const ArgList &Args,
     case llvm::Triple::Solaris:
       TC = std::make_unique<toolchains::Solaris>(*this, Target, Args);
       break;
+    case llvm::Triple::BezOS:
+      TC = toolchains::getBezOSToolChain(*this, Target, Args);
+      break;
     case llvm::Triple::CUDA:
       TC = std::make_unique<toolchains::NVPTXToolChain>(*this, Target, Args);
       break;
diff --git a/clang/lib/Driver/ToolChains/BezOS.cpp b/clang/lib/Driver/ToolChains/BezOS.cpp
new file mode 100644
index 000000000000..d027d1076397
--- /dev/null
+++ b/clang/lib/Driver/ToolChains/BezOS.cpp
@@ -0,0 +1,293 @@
+//===--- BezOS.cpp - BezOS ToolChain Implementations --------*- C++ -*-===//
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===----------------------------------------------------------------------===//
+
+#include "BezOS.h"
+#include "CommonArgs.h"
+#include "clang/Config/config.h"
+#include "clang/Driver/Compilation.h"
+#include "clang/Driver/Driver.h"
+#include "clang/Driver/Options.h"
+#include "llvm/Support/Path.h"
+#include "llvm/Support/VirtualFileSystem.h"
+
+using namespace clang::driver;
+using namespace clang::driver::toolchains;
+using namespace clang;
+using namespace llvm::opt;
+
+class LLVM_LIBRARY_VISIBILITY BezOS : public ToolChain {
+public:
+  BezOS(
+    const Driver &D,
+    const llvm::Triple &Triple,
+    const llvm::opt::ArgList &Args
+  );
+
+  bool HasNativeLLVMSupport() const override;
+
+  void
+  AddClangSystemIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                            llvm::opt::ArgStringList &CC1Args) const override;
+
+  const char *getDefaultLinker() const override { return "ld.lld"; }
+  RuntimeLibType GetDefaultRuntimeLibType() const override { return ToolChain::RLT_CompilerRT; }
+  CXXStdlibType GetDefaultCXXStdlibType() const override { return CST_Libcxx; }
+  bool isPICDefault() const override { return true; }
+  bool isPIEDefault(const llvm::opt::ArgList &Args) const override { return true; }
+  bool isPICDefaultForced() const override { return true; }
+
+  std::string getCompilerRTPath() const override {
+    return getDriver().SysRoot + "/llvm-compiler-rt/lib";
+  }
+
+  void AddClangCXXStdlibIncludeArgs(
+    const llvm::opt::ArgList &DriverArgs,
+    llvm::opt::ArgStringList &CC1Args) const override;
+
+protected:
+  Tool *buildStaticLibTool() const override;
+  Tool *buildLinker() const override;
+
+  std::string getMultiarchTriple(const Driver &D,
+                                  const llvm::Triple &TargetTriple,
+                                  StringRef SysRoot) const override;
+};
+
+namespace tools {
+namespace bezos {
+
+class LLVM_LIBRARY_VISIBILITY StaticLibTool : public Tool {
+public:
+  StaticLibTool(const ToolChain &TC)
+    : Tool("bezos::StaticLibTool", "llvm-ar", TC)
+  {}
+
+  bool hasIntegratedCPP() const override { return false; }
+  bool isLinkJob() const override { return true; }
+
+  void ConstructJob(Compilation &C, const JobAction &JA,
+                    const InputInfo &Output, const InputInfoList &Inputs,
+                    const llvm::opt::ArgList &TCArgs,
+                    const char *LinkingOutput) const override;
+};
+
+class LLVM_LIBRARY_VISIBILITY Linker final : public Tool {
+public:
+  Linker(const ToolChain &TC)
+    : Tool("bezos::Linker", "ld.lld", TC)
+  {}
+  bool isLinkJob() const override { return true; }
+  bool hasIntegratedCPP() const override { return false; }
+  void ConstructJob(Compilation &C, const JobAction &JA,
+                    const InputInfo &Output, const InputInfoList &Inputs,
+                    const llvm::opt::ArgList &TCArgs,
+                    const char *LinkingOutput) const override;
+};
+
+} // end namespace bezos
+} // end namespace tools
+/// Get our best guess at the multiarch triple for a target.
+std::string BezOS::getMultiarchTriple(const Driver &D,
+                                      const llvm::Triple &TargetTriple,
+                                      StringRef SysRoot) const {
+  switch (TargetTriple.getArch()) {
+  default:
+    break;
+
+    // Only x86_64 is supported for now.
+  case llvm::Triple::x86_64:
+    return "x86_64-bezos";
+  }
+
+  llvm_unreachable("unsupported architecture");
+}
+
+BezOS::BezOS(const Driver &D, const llvm::Triple &Triple, const ArgList &Args)
+    : ToolChain(D, Triple, Args) {
+  if (!Args.hasArg(options::OPT_nostdlib, options::OPT_nostartfiles)) {
+    // We need to add the path to the crt1.o file, etc., so that the driver can
+    // use these to build the initial inputs to the link.
+    getLibraryPaths().push_back(getDriver().SysRoot + "/sysapi/lib");
+    getLibraryPaths().push_back(getDriver().SysRoot + "/llvm-compiler-rt/lib");
+    getLibraryPaths().push_back(getDriver().SysRoot + "/llvm-compiler-rt/lib/generic");
+  }
+
+  if (!Args.hasArg(options::OPT_nostdlibxx)) {
+    getLibraryPaths().push_back(getDriver().SysRoot + "/llvm-libcxx/lib");
+  }
+}
+
+bool BezOS::HasNativeLLVMSupport() const { return true; }
+
+Tool *BezOS::buildStaticLibTool() const {
+  return new ::tools::bezos::StaticLibTool(*this);
+}
+
+Tool *BezOS::buildLinker() const { return new ::tools::bezos::Linker(*this); }
+
+void BezOS::AddClangSystemIncludeArgs(const ArgList &DriverArgs,
+                                      ArgStringList &CC1Args) const {
+  std::string SysRoot = computeSysRoot();
+
+  if (!DriverArgs.hasArg(options::OPT_nobuiltininc)) {
+    SmallString<128> Dir(getDriver().ResourceDir);
+    llvm::sys::path::append(Dir, "include");
+    addSystemInclude(DriverArgs, CC1Args, Dir.str());
+    addSystemInclude(DriverArgs, CC1Args, SysRoot + "/llvm-compiler-rt/include");
+  }
+
+  if (!DriverArgs.hasArg(options::OPT_nostdinc)) {
+    // BezOS has no concept of /include or /lib directories, so we add only
+    // the toolchain include directories.
+    addSystemInclude(DriverArgs, CC1Args, SysRoot + "/sysapi/include");
+    addSystemInclude(DriverArgs, CC1Args, SysRoot + "/sysapi/include/posix");
+  }
+
+  if (!DriverArgs.hasArg(options::OPT_nostdlibinc)) {
+    // Check for configure-time C include directories.
+    StringRef CIncludeDirs(C_INCLUDE_DIRS);
+    if (CIncludeDirs != "") {
+      SmallVector<StringRef, 5> Dirs;
+      CIncludeDirs.split(Dirs, ":");
+      for (StringRef Dir : Dirs) {
+        StringRef Prefix =
+            llvm::sys::path::is_absolute(Dir) ? "" : StringRef(SysRoot);
+        addExternCSystemInclude(DriverArgs, CC1Args, Prefix + Dir);
+      }
+    }
+  }
+}
+
+void BezOS::AddClangCXXStdlibIncludeArgs(
+    const llvm::opt::ArgList &DriverArgs,
+    llvm::opt::ArgStringList &CC1Args) const {
+
+  if (DriverArgs.hasArg(options::OPT_nostdincxx, options::OPT_nostdlibinc))
+    return;
+
+  std::string SysRoot = computeSysRoot();
+  addSystemInclude(DriverArgs, CC1Args,
+                   SysRoot + "/llvm-libcxx/include/c++/v1");
+}
+
+void ::tools::bezos::StaticLibTool::ConstructJob(Compilation &C, const JobAction &JA,
+                                            const InputInfo &Output,
+                                            const InputInfoList &Inputs,
+                                            const ArgList &Args,
+                                            const char *LinkingOutput) const {
+  const Driver &D = getToolChain().getDriver();
+
+  // Silence warning for "clang -g foo.o -o foo"
+  Args.ClaimAllArgs(options::OPT_g_Group);
+  // and "clang -emit-llvm foo.o -o foo"
+  Args.ClaimAllArgs(options::OPT_emit_llvm);
+  // and for "clang -w foo.o -o foo". Other warning options are already
+  // handled somewhere else.
+  Args.ClaimAllArgs(options::OPT_w);
+  // Silence warnings when linking C code with a C++ '-stdlib' argument.
+  Args.ClaimAllArgs(options::OPT_stdlib_EQ);
+
+  // ar tool command "llvm-ar <options> <output_file> <input_files>".
+  ArgStringList CmdArgs;
+  // Create and insert file members with a deterministic index.
+  CmdArgs.push_back("rcsD");
+  CmdArgs.push_back(Output.getFilename());
+
+  for (const auto &II : Inputs) {
+    if (II.isFilename()) {
+      CmdArgs.push_back(II.getFilename());
+    }
+  }
+
+  // Delete old output archive file if it already exists before generating a new
+  // archive file.
+  const char *OutputFileName = Output.getFilename();
+  if (Output.isFilename() && llvm::sys::fs::exists(OutputFileName)) {
+    if (std::error_code EC = llvm::sys::fs::remove(OutputFileName)) {
+      D.Diag(diag::err_drv_unable_to_remove_file) << EC.message();
+      return;
+    }
+  }
+
+  const char *Exec = Args.MakeArgString(getToolChain().GetStaticLibToolPath());
+  C.addCommand(std::make_unique<Command>(JA, *this,
+                                         ResponseFileSupport::AtFileCurCP(),
+                                         Exec, CmdArgs, Inputs, Output));
+}
+
+void ::tools::bezos::Linker::ConstructJob(Compilation &C, const JobAction &JA,
+                                     const InputInfo &Output,
+                                     const InputInfoList &Inputs,
+                                     const ArgList &Args,
+                                     const char *LinkingOutput) const {
+  ArgStringList CmdArgs;
+
+  auto &TC = getToolChain();
+  const Driver &D = getToolChain().getDriver();
+
+  clang::driver::tools::AddLinkerInputs(TC, Inputs, Args, CmdArgs, JA);
+
+  CmdArgs.push_back("-Bstatic");
+
+  if (!Args.hasArg(options::OPT_nostdlib, options::OPT_nostartfiles,
+                   options::OPT_r, options::OPT_nodefaultlibs)) {
+    CmdArgs.push_back(Args.MakeArgString(D.SysRoot + "/sysapi/lib/crtstart.o"));
+    CmdArgs.push_back("-e");
+    CmdArgs.push_back("ProgramMain");
+  }
+
+  Args.addAllArgs(CmdArgs, {options::OPT_L, options::OPT_T_Group,
+                            options::OPT_s, options::OPT_t, options::OPT_r});
+
+  TC.AddFilePathLibArgs(Args, CmdArgs);
+
+  for (const auto &LibPath : TC.getLibraryPaths())
+    CmdArgs.push_back(Args.MakeArgString(llvm::Twine("-L", LibPath)));
+
+  if (TC.ShouldLinkCXXStdlib(Args)) {
+    bool OnlyLibstdcxxStatic = Args.hasArg(options::OPT_static_libstdcxx) &&
+                               !Args.hasArg(options::OPT_static);
+    if (OnlyLibstdcxxStatic)
+      CmdArgs.push_back("-Bstatic");
+    TC.AddCXXStdlibLibArgs(Args, CmdArgs);
+    if (OnlyLibstdcxxStatic)
+      CmdArgs.push_back("-Bdynamic");
+  }
+
+  if (!Args.hasArg(options::OPT_nostdlib, options::OPT_nodefaultlibs)) {
+    CmdArgs.push_back(Args.MakeArgString(D.SysRoot + "/llvm-compiler-rt/lib/generic/libclang_rt.builtins-" + TC.getArchName() + ".a"));
+
+    CmdArgs.push_back(Args.MakeArgString(D.SysRoot + "/sysapi/lib/libbezos-sysapi.a"));
+    CmdArgs.push_back(Args.MakeArgString(D.SysRoot + "/sysapi/lib/libbezos-posix.a"));
+  }
+
+  if (D.isUsingLTO()) {
+    assert(!Inputs.empty() && "Must have at least one input.");
+    // Find the first filename InputInfo object.
+    const auto *Input = llvm::find_if(
+        Inputs, [](const InputInfo &II) -> bool { return II.isFilename(); });
+    if (Input == Inputs.end())
+      // For a very rare case, all of the inputs to the linker are
+      // InputArg. If that happens, just use the first InputInfo.
+      Input = Inputs.begin();
+
+    clang::driver::tools::addLTOOptions(TC, Args, CmdArgs, Output, *Input,
+                  D.getLTOMode() == LTOK_Thin);
+  }
+
+  CmdArgs.push_back("-o");
+  CmdArgs.push_back(Output.getFilename());
+
+  C.addCommand(std::make_unique<Command>(
+      JA, *this, ResponseFileSupport::AtFileCurCP(),
+      Args.MakeArgString(TC.GetLinkerPath()), CmdArgs, Inputs, Output));
+}
+
+std::unique_ptr<ToolChain> toolchains::getBezOSToolChain(const Driver &D, const llvm::Triple &Triple, const llvm::opt::ArgList &Args) {
+  return std::make_unique<BezOS>(D, Triple, Args);
+}
diff --git a/clang/lib/Driver/ToolChains/BezOS.h b/clang/lib/Driver/ToolChains/BezOS.h
new file mode 100644
index 000000000000..515a3c22165a
--- /dev/null
+++ b/clang/lib/Driver/ToolChains/BezOS.h
@@ -0,0 +1,27 @@
+//===--- BezOS.h - BezOS ToolChain Implementations ----------*- C++ -*-===//
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===----------------------------------------------------------------------===//
+
+#ifndef LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_BezOS_H
+#define LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_BezOS_H
+
+#include "Gnu.h"
+#include "clang/Driver/ToolChain.h"
+
+namespace clang {
+namespace driver {
+namespace toolchains {
+
+std::unique_ptr<ToolChain> getBezOSToolChain(const Driver &D,
+                                             const llvm::Triple &Triple,
+                                             const llvm::opt::ArgList &Args);
+
+} // end namespace toolchains
+} // end namespace driver
+} // end namespace clang
+
+#endif // LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_BezOS_H
diff --git a/clang/lib/Lex/InitHeaderSearch.cpp b/clang/lib/Lex/InitHeaderSearch.cpp
index bb2a21356fa8..d65e62fe27cf 100644
--- a/clang/lib/Lex/InitHeaderSearch.cpp
+++ b/clang/lib/Lex/InitHeaderSearch.cpp
@@ -304,6 +304,7 @@ bool InitHeaderSearch::ShouldAddDefaultIncludePaths(
   case llvm::Triple::UEFI:
   case llvm::Triple::WASI:
   case llvm::Triple::ZOS:
+  case llvm::Triple::BezOS:
     return false;
 
   case llvm::Triple::Win32:
diff --git a/llvm/include/llvm/TargetParser/Triple.h b/llvm/include/llvm/TargetParser/Triple.h
index 09c0d223d9b4..dce805f0e440 100644
--- a/llvm/include/llvm/TargetParser/Triple.h
+++ b/llvm/include/llvm/TargetParser/Triple.h
@@ -239,7 +239,8 @@ public:
     LiteOS,
     Serenity,
     Vulkan, // Vulkan SPIR-V
-    LastOSType = Vulkan
+    BezOS, // https://github.com/apache-hb/bezos
+    LastOSType = BezOS
   };
   enum EnvironmentType {
     UnknownEnvironment,
@@ -299,6 +300,7 @@ public:
     Amplification,
     OpenCL,
     OpenHOS,
+    JLibc,
 
     PAuthTest,
 
@@ -846,6 +848,8 @@ public:
 
   bool isVulkanOS() const { return getOS() == Triple::Vulkan; }
 
+  bool isBezOS() const { return getOS() == Triple::BezOS; }
+
   bool isShaderStageEnvironment() const {
     EnvironmentType Env = getEnvironment();
     return Env == Triple::Pixel || Env == Triple::Vertex ||
diff --git a/llvm/lib/TargetParser/Triple.cpp b/llvm/lib/TargetParser/Triple.cpp
index e9e6f130f757..3fa0a2f3cad4 100644
--- a/llvm/lib/TargetParser/Triple.cpp
+++ b/llvm/lib/TargetParser/Triple.cpp
@@ -319,6 +319,7 @@ StringRef Triple::getOSTypeName(OSType Kind) {
   case LiteOS: return "liteos";
   case XROS: return "xros";
   case Vulkan: return "vulkan";
+  case BezOS: return "bezos";
   }
 
   llvm_unreachable("Invalid OSType");
@@ -382,6 +383,8 @@ StringRef Triple::getEnvironmentTypeName(EnvironmentType Kind) {
   case OpenHOS: return "ohos";
   case PAuthTest:
     return "pauthtest";
+  case JLibc:
+    return "jlibc";
   case LLVM:
     return "llvm";
   }
@@ -711,6 +714,7 @@ static Triple::OSType parseOS(StringRef OSName) {
     .StartsWith("liteos", Triple::LiteOS)
     .StartsWith("serenity", Triple::Serenity)
     .StartsWith("vulkan", Triple::Vulkan)
+    .StartsWith("bezos", Triple::BezOS)
     .Default(Triple::UnknownOS);
 }
 
@@ -766,6 +770,7 @@ static Triple::EnvironmentType parseEnvironment(StringRef EnvironmentName) {
       .StartsWith("ohos", Triple::OpenHOS)
       .StartsWith("pauthtest", Triple::PAuthTest)
       .StartsWith("llvm", Triple::LLVM)
+      .StartsWith("jlibc", Triple::JLibc)
       .Default(Triple::UnknownEnvironment);
 }
 
diff --git a/llvm/unittests/TargetParser/TripleTest.cpp b/llvm/unittests/TargetParser/TripleTest.cpp
index 61b3637bb48e..3283520472c1 100644
--- a/llvm/unittests/TargetParser/TripleTest.cpp
+++ b/llvm/unittests/TargetParser/TripleTest.cpp
@@ -1313,6 +1313,17 @@ TEST(TripleTest, ParsedIDs) {
   EXPECT_EQ(Triple::Serenity, T.getOS());
   EXPECT_EQ(Triple::UnknownEnvironment, T.getEnvironment());
 
+  T = Triple("x86_64-unknown-bezos-jlibc");
+  EXPECT_EQ(Triple::x86_64, T.getArch());
+  EXPECT_EQ(Triple::UnknownVendor, T.getVendor());
+  EXPECT_EQ(Triple::BezOS, T.getOS());
+  EXPECT_EQ(Triple::JLibc, T.getEnvironment());
+
+  T = Triple("x86_64-unknown-bezos");
+  EXPECT_EQ(Triple::x86_64, T.getArch());
+  EXPECT_EQ(Triple::UnknownVendor, T.getVendor());
+  EXPECT_EQ(Triple::BezOS, T.getOS());
+
   T = Triple("aarch64-unknown-linux-pauthtest");
   EXPECT_EQ(Triple::aarch64, T.getArch());
   EXPECT_EQ(Triple::UnknownVendor, T.getVendor());
@@ -2463,6 +2474,7 @@ TEST(TripleTest, FileFormat) {
   EXPECT_EQ(Triple::ELF, Triple("i686-unknown-netbsd").getObjectFormat());
   EXPECT_EQ(Triple::ELF, Triple("i686--win32-elf").getObjectFormat());
   EXPECT_EQ(Triple::ELF, Triple("i686---elf").getObjectFormat());
+  EXPECT_EQ(Triple::ELF, Triple("x86_64-bezos-elf").getObjectFormat());
 
   EXPECT_EQ(Triple::MachO, Triple("i686-apple-macosx").getObjectFormat());
   EXPECT_EQ(Triple::MachO, Triple("i686-apple-ios").getObjectFormat());
